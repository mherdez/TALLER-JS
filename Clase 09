<!-- - filter
- find
- every
- some
- fill
- split
- join
- slice -->

// FILTER

const arr = [1,2,3,4,5,6]

// devuelve los elementos del arreglo que cumplan con la condicion que se declara en el callback

// devuelve los numeros impares
arr.filter( numero => numero % 2 != 0 )


const arr = [1,2,3,4,5,6]

// SOME
// some: regresa verdadero si al menos uno de los resultados de la evaluacion condicional da verdadero. En caso de que no haya ninguno que lo cumpla regresa falso
arr.some( num => num == 7)

// EVERY
// every: regresa verdadero si TODOS los resultados de la evaluacion condicional dan verdadero. En caso de que al menos uno no cumpla regresa falso
arr.every( num => num >= 2)


// FILL
// llenar un arreglo con un elementos estatico

// const arr = new Array(5)

// arr.fill(null).map((num, ind) => ind + 1)

const numeros = [1,2,3,4,5,6,7,8,9,10];

let newArr = []
for( let i = 1; i <= 10; i++) {
  // newArr.push(i)
  newArr = [...newArr, i]
}

const newArr2 = new Array(10).fill(null).map( (n,i) => i + 1)


console.log(numeros)
console.log(newArr)
console.log(newArr2)



const key = [1,2,3,4,5,6,7,8,9,0]
const codigoEspia = 'E7 d1a de h0y qui3ro saber m4s'


// const nip = codigoEspia.split('').filter( el => !isNaN(Number(el)) && Number(el)).join('')

const nip = codigoEspia.split('').filter( el => key.includes(Number(el)) && Number(el)).join('')


console.log(nip)











// const numeros = '123456789'

// const pares = numeros.split('').filter( numero => numero % 2 == 0).join('')

// console.log(pares)


// const palabra = '123456789'
// // split separa las cadenas en arreglo
// const s = palabra.split('')

// // join une los elementos de un arreglo en cadena string
// const j = s.join('')

// console.log({s, j})
